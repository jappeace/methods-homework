package nl.jappieklooster.hw.ec.algorithm

import nl.jappieklooster.hw.ec.model.{IMember, Graph}
import scala.util.Random

object LocalSearch {

	/**
	* The local search algorithm we use is the vertex
	* swap neighborhood search (VSN). In VSN a neighboring solution is generated by swapping
	* two vertices, one from each partitioning.
	*/
	def vertexSwap(random:Random, graph:Graph, memberFactory:String => IMember)(member:IMember):IMember = {
		val fitness = member.fitness
		val partitioning = member.genes

		val startpoint = random.nextInt(graph.verteci.length)
		for(index <- startpoint.to(graph.verteci.length)){
			val vert = graph.verteci(index)
			val result = vert.connections.filter(p => partitioning(index) == partitioning(p))
		}
	}
}
