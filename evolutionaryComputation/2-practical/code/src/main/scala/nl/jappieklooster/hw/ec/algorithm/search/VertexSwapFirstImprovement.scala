package nl.jappieklooster.hw.ec.algorithm.search

import nl.jappieklooster.hw.ec.model.{Graph, IMember}

import Search._

/**
 * The local search algorithm we use is the vertex
 * swap neighborhood search (VSN). In VSN a neighboring solution is generated by swapping
 * two vertices, one from each partitioning.
 */
class VertexSwapFirstImprovement(graph:Graph, memberFactory:String => IMember) extends SearchMethod{

	override def apply(member: IMember): IMember = {
		val partitioning = member.genes
		// swapping of vertex in partitions
		val swapVertex = swapChar(member.genes) _

		// I just don't know a good way to do this with recursion or combbinators
		for(index <- 0.until(graph.verteci.length)){
			val vert = graph.verteci(index)
			val options = vert.connections.filter(conindx => partitioning(index) != partitioning(conindx))

			var lastMember:IMember = null // optimization, prevents member creation and valuation twice

			// first improvement variant
			val result = options.find(conindx => {
				lastMember = memberFactory(swapVertex(conindx, index))
				lastMember.fitness > member.fitness
			})
			if(!result.isEmpty){
				return lastMember
			}

		}
		member
	}
}
