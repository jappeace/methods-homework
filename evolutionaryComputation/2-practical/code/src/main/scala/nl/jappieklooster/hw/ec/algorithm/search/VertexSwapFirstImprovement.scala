// Evolutionary Computing Analyzer, it analyzes various genetic algoritms
// Copyright (C) 2015 Jappie Klooster

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/\>.
package nl.jappieklooster.hw.ec.algorithm.search

import nl.jappieklooster.hw.ec.model.{Graph, IMember}

import Search._

/**
 * The local search algorithm we use is the vertex
 * swap neighborhood search (VSN). In VSN a neighboring solution is generated by swapping
 * two vertices, one from each partitioning.
 */
class VertexSwapFirstImprovement(graph:Graph, memberFactory:String => IMember) extends SearchMethod{

	override def apply(member: IMember): IMember = {
		val partitioning = member.genes
		// swapping of vertex in partitions
		val swapVertex = swapChar(member.genes) _

		// I just don't know a good way to do this with recursion or combbinators
		for(index <- 0.until(graph.verteci.length)){
			val vert = graph.verteci(index)
			val options = vert.connections.filter(conindx => partitioning(index) != partitioning(conindx))

			var lastMember:IMember = null // optimization, prevents member creation and valuation twice

			// first improvement variant
			val result = options.find(conindx => {
				lastMember = memberFactory(swapVertex(conindx, index))
				lastMember.fitness > member.fitness
			})
			if(!result.isEmpty){
				return lastMember
			}

		}
		member
	}
}
