#+TITLE: Jungian personality in a chatbot
#+LANGUAGE: en
#+REVEAL_ROOT: ./reveal.js-3.5.0
#+REVEAL_THEME: blood
#+REVEAL_TRANS: linear
#+REVEAL_PLUGINS: notes 

# disable tic so it doesn't appear at the top but where we want it instead
#+Options: toc:nil ^:nil 
#+Options: num:nil

# we don't want numbering to appear in front of headings until
#+Options: H:5

#+BEGIN_NOTES
Welcome
#+END_NOTES

* Please interupt
I like discussion..

#+BEGIN_NOTES
For comments
Questions
#+END_NOTES

* Communication training
+ Important
+ Expensive

#+BEGIN_NOTES
+ Important
  + Humans, social creatures
  + Communicating now!
+ Expensive
  + Third party to listen
  + Another to judge
+ Solution = serious games
#+END_NOTES

* Communicate!
#+CAPTION: Client view
#+NAME:   fig:communicate-client
[[./img/client-communicate.png]]

#+BEGIN_NOTES
+ The game
+ Choose the right button
+ Doctor patient
#+END_NOTES

** Editor
 #+CAPTION: Editor view communicate!
 #+NAME:   fig:communicate-editor
 [[./img/editor.png]]


#+BEGIN_NOTES
+ Teacher makes scenario
+ Problematic because
  + Options visible
  + No creativity
+ Solution: Chatbots
#+END_NOTES
* Salve
#+BEGIN_NOTES
+ Based upon ALICE
#+END_NOTES

** Social practice
+ Context
+ Culture
+ Activity
#+BEGIN_NOTES
+ My teachers' research
+ Context=Teasing
+ Activity=Core concept of study
#+END_NOTES

** Emotions
+ OCC
+ Decay based
+ In drools

#+BEGIN_NOTES
+ Emotions != personality
+ Start high goes slowly lower
+ Drools later
#+END_NOTES

** Scenes
+ Group patterns
+ More argressive

#+BEGIN_NOTES
+ Enable disable
+ Broader patterns
#+END_NOTES

** Architecture
[[./img/abstract-architecture.png]]

#+BEGIN_NOTES
+ See discussed concepts
+ Abstract architecture
+ Analyzed in depth
+ Not technical
#+END_NOTES

** AIML
#+CAPTION: AIML example: why are you here?
#+NAME: code:aiml-example-why-here
#+BEGIN_SRC nxml
<aiml>
<categroy>
    <pattern>
        Hello
    </pattern>
    <template>
        Hi
    </template>
</categroy>
<category>
    <pattern>
        How are you *
    </pattern>
    <template>
        Not doing too well today.
    </template>
</category>
</aiml>
#+END_SRC

#+BEGIN_NOTES
+ From pattern to reply
+ Can be broad
+ Star
+ This is all ALICE
#+END_NOTES

** S-AIML

#+CAPTION: Extended AIML that uses knowledge
#+NAME: code:s-aiml-inserts
#+BEGIN_SRC nxml
<aiml>
<category>
    <pattern>why are you here</pattern>
    <preconditions>not healthProblemAsked</preconditions>
    <template>
        <insert
            packageName="sp.anamnesi.health_problem"
            typeName="HealthProblemAsked"
        />
        I'm experiencing a <getDroolsTemplate />. It's quite strong.
    </template>
</category>
</aiml>
#+END_SRC

#+BEGIN_NOTES
+ Extensions by salve
+ Read write to drools engine
  + Disable patterns
  + Enable patterns
  + Alter templates
#+END_NOTES

** Drools rule
#+CAPTION: Drools rule example
#+NAME: code:drools
#+BEGIN_SRC java
rule "Greetings goals achieved"
when
	GreetingReceived()
then
	FinishedSceneEvent f = new FinishedSceneEvent();	
	f.setSceneName("Greetings");
	insert(f);
end
rule "Greeting not received in time"
when
	$startScene:EnterScene(scene.name=="Greetings")	
	not(GreetingReceived(this after[0ms,10000ms] $startScene))
then
	OCCNotHappenedEvent e=new OCCNotHappenedEvent();
	don(e,DesirableEvent.class);
	don(e,ProspectedRelevantEvent.class);
	insert(e);
	controller.respond("Did you want something from me..?");
end
#+END_SRC

#+BEGIN_NOTES
+ Query
+ On fact base
+ Execute java code
  + Alter fact base
  + Interact with env
+ S-AIML reads factbase
#+END_NOTES

** Client view
#+CAPTION: Client view salve
#+NAME:   fig:client-salve
[[./img/client.png]]

#+BEGIN_NOTES
+ Unity
+ User enters text
+ Bot replies
  + Can show emotion
  + Face expressions
#+END_NOTES

* Goals
+ Compare personality theories
+ As a process
+ Use Salve game

#+BEGIN_NOTES
+ Everything before background
+ Then I came
+ These goals discussed initially
+ All things more later
+ I asked personality
  + Because earlier interest
+ Teacher urged personality process
  + Value based has been studied alot
  + Process based is more elegant
+ I asked existing project
  + I like reverse engeneering
#+END_NOTES

* Personality theories
#+BEGIN_NOTES
+ Start with researching
+ I had little experience
+ Field of psychology
#+END_NOTES
** OCEAN
- Taxonomy mining
- Factor analyses
- No theory
- Accepted
- Measure: NEO-PI, NEO-FFI

#+BEGIN_NOTES
+ Taxonomy=Data
+ Factor analyses
  + Find variables
  + Rotation
#+END_NOTES
** Jung
- Personality types
- Free form questions
- Introversion vs Extroversion
- Rational vs Irattional

\[\mathcal{J} = \{ T_e, T_i, F_e, F_i, S_e, S_i, N_e, N_i\} \]

#+BEGIN_NOTES
- Attitudes
- Functions
- FA
- Primary, auxiliary
  - Can self identify
- Jung: Type doesn't change
  - Measurement can be innacurate
  - Change trough trauma
#+END_NOTES


*** Rationale: Thinking
| /     | <>                   |
| $T_e$ | Thinking extroverted |
| $T_i$ | Thinking introverted |

#+BEGIN_NOTES
- $T_e$
  - Real world
  - With goals
  - Solving problems
  - System to check
  - My auxiliary
- $T_i$
  - Deductive thinking
  - Axiomatic system
  - Math
  - Not solve problems (neccisarly)
#+END_NOTES

*** Rationale: Feeling
| /     | <>                   |
| $F_e$ | Feeling extroverted |
| $F_i$ | Feeling introverted |

#+BEGIN_NOTES
- *Not* about emotions
- $F_e$
  - Judge objects on beauty
  - Group values
  - Fashion
- $F_i$
  - Personal values
  - Empathetic
  - Still waters run deep
#+END_NOTES

*** Irationale: Sensing
| /     | <>                   |
| $S_e$ | Sensing extroverted |
| $S_i$ | Sensing introverted |


#+BEGIN_NOTES
- *Not* about emotions
- $S_e$
  - Act on concrete data now
  - Practical and realistic
  - Athletes and heavy machines
- $S_i$
  - Concrete data memories
  - QA as possible job
#+END_NOTES
*** Irationale: Intuition
| /     | <>                   |
| $N_e$ | Intuition extroverted |
| $N_i$ | Intuition introverted |

#+BEGIN_NOTES
- *Not* about emotions
- $N_e$
  - Ideas in every situation
  - Entreperneurs
  - Inspiring
- $N_i$
  - Posibilities in ideas
  - Connecting ideas
  - Maybe not understood
  - Shaman or visonary
  - My dominant
#+END_NOTES

** MBTI
- Carl Jung
- Quesstionaire measurement
- In order
- Critizised
- PPSDQ, SL-TDI

\[ INTJ = N_i > T_e  > F_i > S_e \]

#+BEGIN_NOTES
- Extends work of Jung
#+END_NOTES

** Which one is the best?
We need:
- Realism
- Implementable

** OCEAN
Has:
- *Realism*
- Implementable

Because:
- Accepted,
- very broad

** MBTI
Has:
- Realism
- *Implementable*

Because:
- Solid thoery
- Finite types (16)

#+BEGIN_NOTES
- 16 different chatbots
  - Not OCEAN
#+END_NOTES

** Which one is the best?

** Jung
- Can assume MBTI
- Later PPSDQ or SL-TDI
- Mapping to OCEAN

#+BEGIN_NOTES
- What is mapping
#+END_NOTES

* Dialogue as process

#+BEGIN_NOTES
- Model core idea.
- Unite personality with dialogue
#+END_NOTES

** Some syntax
+ Categories
+ Arrows

\[ a \to a \]
\[ a \to b \]

#+BEGIN_NOTES
- Based on Haskell
  - Roughly
  - Because simple
- Wanted to be understandable
  - succeeded?
  - Reduce possibilities
- Category
  - Integers
  - Apples
  - Unlike sets
- Arrow
  - is a function
  - A processing step
  - Some thinking
- First +1
  - Int -> Int
- Second /2
  - Int -> Float
#+END_NOTES

*** Model the idea
 /Type signatures/

 \[a \to b \to c \]
 \[a \to (b \to c) \]

 partial apply with $a$

 \[ b \to c \]

*** Data
 \[ \text{a and b}=(a,b) \]
 \[ \text{list a}=[a] \]

 #+BEGIN_NOTES
 - Algabraic data types
 - List is ordered
 #+END_NOTES

** Every agent ever
\[ B \to \pi \to (B, \Delta) \]

| /   | <>                |
| $B$ | Believes          |
| $\pi$ | Sense information |
| $\Delta$ | Actions           |

#+BEGIN_NOTES
- What is an agent?
  - Concepts attributed to humans
  - Autonomous
  - Social
- Fits?
- Plans are arrows
- Desires in believes
- Not complete
  - System carries believes back
  - System delieves sense info
  - System executes actions
#+END_NOTES

** Every chatbot ever
Stateless:
\[ \sigma \to \sigma \]

Statefull:
\[ B \to \sigma \to  (\sigma, B) \]

| /   | <>       |
| $\sigma$ | String   |
| $B$ | Believes |

#+BEGIN_NOTES
- What is a chatbot?
  - Program that replies in text
- Reduction in scope
- String is textmsg
  - User types
- Track state in believes
  - State is disabling/enabling patterns
#+END_NOTES

** Core idea
Add in between step:
\[ \sigma \to s \]
\[ s \to \sigma\]

| /   | <>     |
| $\sigma$ | String |
| $s$ | Symbol |

#+BEGIN_NOTES
- Symbol is something we know
  - Encoded in system
  - 'Understanding'
- We can get it from to string
#+END_NOTES

*** Statefull symbol chatbot

\[B \to s \to  (s, B)\]

| /   | <>       |
| $B$ | Believes |
| $s$ | Symbol   |

#+BEGIN_NOTES
- More simple because..
  - We KNOW
- Incomplete
  - No connections
#+END_NOTES

*** Connect symbols in graph
\[ c = (s_1, s_2) \]
\[ s_1, s_2 \in \mathcal{S} \wedge c \in G \]

| /             | <>                  |
| $c$           | connection          |
| $s$           | Symbol              |
| $\mathcal{S}$ | All encoded symbols |
| $G$           | Symbol graph        |

#+BEGIN_NOTES
- Connection is symbol one and two
- Connections are in graph
- Symbols are encoded
#+END_NOTES

*** Add game tree
 \[ u = (a,s) \]
 \[ D = (u, [D])\]

| /   | <>            |
| $u$ | Utterance     |
| $a$ | Actor         |
| $s$ | Symbol        |
| $D$ | Dialogue tree |

#+BEGIN_NOTES
- Utterance is sthng said
  - By agent
  - In symbol
- If we think ahead
  - Get tree structure
  - Dialogutree models that
- First child in diatree is preffered
#+END_NOTES

*** Reasoning model
 \[ B \to D \overset{f_a}{\to} (B, D) \]

| /     | <>               |
| $B$   | Believes         |
| $D$   | Dialogue tree    |
| $f_a$ | Jungian function |

#+BEGIN_NOTES
- More complex
- Can think ahead
- Can pass reasoning to next $f_a$
- This is what we want
#+END_NOTES

*** In order
\[ f_a \to f_a \]

or 

\[ \text{personality} = [f_a] \]

#+BEGIN_NOTES
- Either as next arg
  - Controll in $F_a$
- In list
  - Controll in system
- We use both
#+END_NOTES

** Define process per function

#+BEGIN_NOTES
- Think intrepertation
- Jung combines dialogue deliberation
#+END_NOTES

*** Rational vs Irrational
+ Action generation
+ Sort by preference
+ Modify the Dialogue tree

#+BEGIN_NOTES
- Our intrepertation
  - Other interpretations can coincide
- Think alligns
#+END_NOTES

*** Irrational
Action generation
+ $N_i$ Depth first
+ $N_e$ Depth + $x$ breath
+ $S_e$ Breath (all available)
+ $S_i$ Learned connection else random

#+BEGIN_NOTES
+ $N$ should be back progegation
  + Trouble with loops
+ $S_i$ should be memories
#+END_NOTES
*** Rational
Sorts by preference
+ $T_e$ Priority on goals, else scene transitions
+ $T_i$ Priority on goals, else favour more options
+ $F_i$ Interal perlocutionary values
+ $F_e$ Learned perlocutionary values

#+BEGIN_NOTES
+ Goals encoded in believes
+ Perlocutionary values, values in believes
+ $F$ use lookup table
+ $F_e$ is learning like Campos
#+END_NOTES

**** Goals
\[ \phi = (a, s) \]

| /   | <>     |
| $a$ | Actor  |
| $s$ | Symbol |
| $\phi$ | Goal   |

- Can compare priority
- Can see if finished

#+BEGIN_NOTES
Used by thinking
#+END_NOTES

**** Perlocutionary values
Modified connections:

\[ c = (s_1, s_2, P) \]

| /   | <>                       |
| $c$ | connection               |
| $s$ | Symbol                   |
| $P$ | Perlocutionary value set |

#+BEGIN_NOTES
Used by Feeling
#+END_NOTES

* Use Salve game

#+BEGIN_NOTES
+ How to combine?
#+END_NOTES

** Remember
Every chat bot ever:
\[ \sigma \to \sigma \]

| /   | <>       |
| $\sigma$ | String   |

#+BEGIN_NOTES
+ String is a user message
#+END_NOTES

** Even Alice with AIML
\[ \sigma \to \sigma \]
#+BEGIN_SRC nxml
<aiml>
<category>
    <pattern>
        How are you
    </pattern>
    <template>
        Not doing too well today.
    </template>
</category>
</aiml>
#+END_SRC

#+NAME: fig:pres:depaimlcats
#+BEGIN_SRC plantuml :cache yes :file img/uml/pres:depaimlcats.svg :exports results
skinParam backgroundColor transparent

usecase "How are you" as how

storage "Not doing well today." as notwell

how -> notwell
#+END_SRC

#+LABEL: fig:pres:depaimlcats
#+ATTR_HTML: :style width:100%
#+RESULTS[c47369a41cc60a9075bf6b0c9147590aab9f9c32]: fig:pres:depaimlcats
[[file:img/uml/pres:depaimlcats.svg]]

** The in between step
\[ \sigma \to s \]
\[ s \to \sigma\]

| /   | <>     |
| $\sigma$ | String |
| $s$ | Symbol |

*** $\sigma \to s$

#+BEGIN_SRC nxml
<aiml>
<category>
    <pattern>
        How are you
    </pattern>
    <symbol>
      StatusInquiry
    </symbol>
</category>
</aiml>
#+END_SRC

#+NAME: fig:pres:aimlsyms
#+BEGIN_SRC plantuml :cache yes :file img/uml/pres:aimlsyms.svg :exports results
skinParam backgroundColor transparent
usecase "How are you" as how

node StatusInquiry

how -> StatusInquiry
#+END_SRC

#+LABEL: fig:pres:aimlsyms
#+ATTR_HTML: :style width:100%
#+RESULTS[f83625dd3fa507ca4453e722687426a5ec24e8a2]: fig:pres:aimlsyms
[[file:img/uml/pres:aimlsyms.svg]]

*** $s \to \sigma$
#+BEGIN_SRC nxml
<aiml>
<category>
    <literal>
        How are you?
    </literal>
    <patterns>
        <pattern>How * you</pattern>
        <pattern>How are you *</pattern>
    </patterns>
    <symbol>
      StatusInquiry
    </symbol>
</category>
</aiml>
#+END_SRC

#+NAME: fig:pres:aimlliters
#+BEGIN_SRC plantuml :cache yes :file img/uml/pres:aimlliters.svg :exports results
skinParam backgroundColor transparent
  usecase "How are you?" as howq
  usecase "How are you *" as how
  usecase "How * you" as howstar

node StatusInquiry[
  StatusInquiry
  ----
  How are you?
]

how --> StatusInquiry
howq --> StatusInquiry
howstar --> StatusInquiry
#+END_SRC

#+LABEL: fig:pres:aimlliters
#+ATTR_HTML: :style width:80%
#+RESULTS[aa85d6107856d0b7663a997957e89a8222357207]: fig:pres:aimlliters
[[file:img/uml/pres:aimlliters.svg]]

*** Terser
#+BEGIN_SRC xml
<literal>
    How are you?
</literal>
<patterns>
    <pattern>How * you</pattern>
    <pattern>How are you *</pattern>
</patterns>
#+END_SRC

With:
+ Symbol name in filename
  + Free uniqueness gauranteed by FS
+ Drop aiml tags
+ Drop category tags

*** But Illegal XML

#+BEGIN_NOTES
+ Why use XML?
  + Not dataformat
  + Very verbose
#+END_NOTES

*** So we use YAML
#+BEGIN_SRC yaml
literals:
  - How are you
patterns:
  - How * you
  - How are you *
#+END_SRC
Still with symbol name as filename.

** Symbol graph

\[ c = (P, A, s_1, s_2) \]
\[ s_1, s_2 \in \mathcal{S} \wedge c \in G \]

| /             | <>                    |
| $c$           | connection            |
| $s$           | Symbol                |
| $P$           | Perlocutionary values |
| $A$           | Restricted to         |
| $\mathcal{S}$ | All encoded symbols   |
| $G$           | Symbol graph          |

#+BEGIN_NOTES
+ Need to represent
+ Added actors restriction
  + Prevent werid situations
#+END_NOTES

*** In YAML
#+BEGIN_SRC yaml
from:
 - greeting
to:
 - symbol: status_inquery
 - symbol: greeting
#+END_SRC

#+NAME: fig:pres:connections
#+BEGIN_SRC plantuml :cache yes :file img/uml/pres:connections.svg :exports results
node StatusInquiry[
  StatusInquiry
  ----
  How are you?
]
node Greeting [
  Greeting
  ----
  Hello
]

Greeting => Greeting
StatusInquiry <= Greeting 
#+END_SRC

#+LABEL: fig:pres:connections
#+RESULTS[e7b66c174ba1f6ac72d727dc7de36084cd03de5f]: fig:pres:connections
[[file:img/uml/pres:connections.svg]]


#+BEGIN_NOTES
+ This is how
+ This in place
  + Think about personality
#+END_NOTES

** Steering
#+BEGIN_NOTES
+ Have connections
+ How certain personalities go where
#+END_NOTES

*** Starting from a dialogue
| Who      | Utterance                                         |
|----------+---------------------------------------------------|
| Doctor   | Hi                                                |
| /Sander/ | /Hello/                                           |
| Doctor   | How can I help you?                               | 
| /Sander/ | /I have a back pain./                             |
| Doctor   | When did this first occur?                        |
| /Sander/ | /When I lifted a heavy object./                   |
| Doctor   | Oh, yes then you need some pain killers for this. |
| /Sander/ | /Thank you doctor/                                |

#+BEGIN_NOTES
+ Start with dialogue
+ One for each personality
#+END_NOTES

*** Create
#+CAPTION: greeting.yml
#+BEGIN_SRC yaml
  literals:
    - Hello
    - Hi
#+END_SRC

#+CAPTION: _connections.yml
#+BEGIN_SRC yaml
from:
 - greeting
to:
 - symbol: greeting
 - symbol: status
 - symbol: ask_reason_here
   scene: information_gathering
#+END_SRC

#+BEGIN_NOTES
+ Encode symbols
+ Respective connections
#+END_NOTES

*** Make believes

**** Goals
\[ \phi = (a, s) \]

| /   | <>     |
| $a$ | Actor  |
| $s$ | Symbol |
| $\phi$ | Goal   |

#+BEGIN_SRC yaml
goals:
  - actor: doctor
    scene: diagnoses
    symbol: have_painkillers
  - actor: patient
    scene: information_gathering
    symbol: back_pain
#+END_SRC

#+BEGIN_NOTES
+ Goals encoded in believes
+ Top is most important
+ No equality (as list)
#+END_NOTES
**** Values
#+CAPTION: Believes YAML
#+BEGIN_SRC yaml
values:
  enthusiasm: 8
  polite: 5
#+END_SRC

#+CAPTION: Connections YAML
#+BEGIN_SRC yaml
from:
 - greeting
to:
 - symbol: greeting 
   values:
   - Polite
 - symbol: status
   restricted_to: patient
   values:
   - Polite
   - Enthusiasm
#+END_SRC

#+BEGIN_NOTES
+ Lookup table in believes
+ The scenario tells what is polite
  + Valuation happens with believes
+ Not value based
  + A personality can hate being polite
#+END_NOTES

**** Actors
#+BEGIN_SRC yaml
self: patient
actors:
  - patient
  - doctor
#+END_SRC

#+BEGIN_NOTES
+ To expend connections
+ To know one self
+ Just a technicallity
#+END_NOTES

**** Personality
#+BEGIN_SRC yaml
# ENFP
personality: [Ne, Fi, Te, Si]
#+END_SRC

#+BEGIN_NOTES
+ Jungian functions
+ Left one most important
#+END_NOTES
**** All together
#+BEGIN_SRC yaml
goals:
  - actor: doctor
    scene: diagnoses
    symbol: have_painkillers
  - actor: patient
    scene: information_gathering
    symbol: back_pain
values:
  enthusiasm: 8
  polite: 5

self: patient
actors:
  - patient
  - doctor

# ENFP
personality: [Ne, Fi, Te, Si]
#+END_SRC

#+BEGIN_NOTES
+ Everything combined
#+END_NOTES

*** Can also add drool rules
#+CAPTION: Low level greeting reply
#+NAME: code:drool:lowlevelreply
#+BEGIN_SRC java
rule "Low level hello replies with hello first time"
when
	$pre:PreProcessed(
      $symbol:utterance.what, 
      $symbol.name == "introduction/greeting", 
      $actor:utterance.byWhom
    )
	$believes:Believes($actor != self)
then
	log.info("low level entry");
	delete($pre);

	final Informative infor = new Informative($believes.self, $symbol);
	final Utterance resulting = $believes.findToFromLastUttTo(infor)
		.map(Utterance::createFromConnection)
		.orElse(Utterance.create(infor.who, infor.what, PerlocutionaryValueSet.empty));
	insert(new Reply(resulting.setByWhom(infor.who), QueryDatabase.empty));
end
#+END_SRC


#+BEGIN_NOTES
+ Gode mode
  + As see next
+ Required for greeting
+ Can treat repition specifically
#+END_NOTES

** Current architecture
#+ATTR_HTML: :style width:100%
[[./img/uml/architecture-concept.svg]]

* Testing
+ Create dialogue
+ Implement
+ Act like doctor
+ Expect replies
+ INTJ, ENFP, ISTP
* Conclusion
+ Used Jung theory
+ Replaced AIML
+ Center of deliberation
+ Works for scenario
* Future work
** Social practice
+ Culture
+ Context
+ Norms
** Multilogue architecture
[[./img/uml/n-agent-arch.svg]]
** Other ideas
+ Use linguistic theory
+ Dynamically create symbol graph
+ Fuzzy matching
+ Statistical matching
+ GPU based matching
+ Emotions
+ UI improvements
* Questions?

