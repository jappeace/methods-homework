#+TITLE: Jungian personality in a chatbot
#+LANGUAGE: en
#+REVEAL_ROOT: ./reveal.js-3.5.0
#+REVEAL_THEME: blood
#+REVEAL_TRANS: linear

# disable tic so it doesn't appear at the top but where we want it instead
#+Options: toc:nil ^:nil 
#+Options: num:nil

# we don't want numbering to appear in front of headings until
#+Options: H:5

* Communication training
+ Important
+ Expensive

* Communicate!
Presented in cite:jeuring2015demo
#+CAPTION: Client view communicate!
#+NAME:   fig:communicate-client
[[./img/client-communicate.png]]

** Editor
#+CAPTION: Editor view communicate!
#+NAME:   fig:communicate-editor
[[./img/editor.png]]

* Salve
+ Based on ALICE
+ AIML
+ Drools
+ Unity

** Architecture
[[./img/abstract-architecture.png]]

** AIML
#+CAPTION: AIML example: why are you here?
#+NAME: code:aiml-example-why-here
#+BEGIN_SRC nxml
<aiml>
<categroy>
    <pattern>
        Hello
    </pattern>
    <template>
        Hi
    </template>
</categroy>
<category>
    <pattern>
        How are you
    </pattern>
    <template>
        Not doing too well today.
    </template>
</category>
</aiml>
#+END_SRC

** S-AIML

#+CAPTION: Extended AIML that uses knowledge
#+NAME: code:s-aiml-inserts
#+BEGIN_SRC nxml
<aiml>
<category>
    <pattern>why are you here</pattern>
    <preconditions>not healthProblemAsked</preconditions>
    <template>
        <insert
            packageName="sp.anamnesi.health_problem"
            typeName="HealthProblemAsked"
        />
        I'm experiencing a <getDroolsTemplate />. It's quite strong.
    </template>
</category>
</aiml>
#+END_SRC

** Drools rule
#+CAPTION: Drools rule example
#+NAME: code:drools
#+BEGIN_SRC java
rule "Greetings goals achieved"
when
	GreetingReceived()
then
	FinishedSceneEvent f = new FinishedSceneEvent();	
	f.setSceneName("Greetings");
	insert(f);
end
rule "Greeting not received in time"
when
	$startScene:EnterScene(scene.name=="Greetings")	
	not(GreetingReceived(this after[0ms,10000ms] $startScene))
then
	OCCNotHappenedEvent e=new OCCNotHappenedEvent();
	don(e,DesirableEvent.class);
	don(e,ProspectedRelevantEvent.class);
	insert(e);
	controller.respond("Did you want something from me..?");
end
#+END_SRC

** Client view
#+CAPTION: Client view salve
#+NAME:   fig:client-salve
[[./img/client.png]]

* Goals
+ Compare personality theories
+ As a process
+ Use Salve game

* Personality theories

** OCEAN
- taxonomy mining
- factor analyses
- no theory
- accepted
- measure: NEO-PI, NEO-FFI

** Jung
- Personality types
- Free form questions
- Introversion vs Extroversion
- Rational vs Irattional

\[ \mathcal{J} = \{ T_e, T_i, F_e, F_i, S_e, S_i, N_e, N_i\}\]

** MBTI
- Carl Jung
- In order
- Quesstionaire measurement
- Critizised
- PPSDQ, SL-TDI

\[ INTJ = N_i > T_e  > F_i > S_e \]

** Which one is the best?
We need:
- Realism
- Implementable

** OCEAN
Has:
- *Realism*
- Implementable

Because:
- Accepted,
- very broad

** MBTI
Has:
- Realism
- *Implementable*

Because:
- Solid thoery
- Finite types (16)

** Which one is the best?

** Jung
- Can assume MBTI
- Later PPSDQ or SL-TDI
- Mapping to OCEAN
* Goals
+ +Compare personality theories+
+ As a process
+ Use Salve game
* Dialogue as process
+ Model the idea
+ /type signatures/
+ Categories
+ Arrows

\[a \to b \to c \]
\[a \to (b \to c) \]
partial apply with $a$

\[b \to c \]

** Every agent ever
\[ B \to \pi \to (B, \Delta) \]

| /   | <>                |
| $\pi$ | Sense information |
| $B$ | Believes          |
| $\Delta$ | Actions           |

** Every chatbot ever
Stateless:
\[ \sigma \to \sigma \]

Statefull:
\[ B \to \sigma \to  (\sigma, B) \]

| /   | <>       |
| $\sigma$ | String   |
| $B$ | Believes |

** Core idea
Add in between step:
\[ \sigma \to s \]
\[ s \to \sigma\]

| /   | <>     |
| $\sigma$ | String |
| $s$ | Symbol |

*** Connect symbols in graph
\[ c = (s_1, s_2) \]
\[ s_1, s_2 \in \mathcal{S} \wedge c \in G \]

| /             | <>                  |
| $c$           | connection          |
| $s$           | Symbol              |
| $\mathcal{S}$ | All encoded symbols |
| $G$           | Symbol graph        |

*** Add game tree
 \[ u = (a,s) \]
 \[ D = (u, [D])\]

| /   | <>            |
| $u$ | Utterance     |
| $a$ | Actor         |
| $s$ | Symbol        |
| $D$ | Dialogue tree |

*** Reasoning model
 \[ B \to D \overset{f_a}{\to} (B, D) \]

| /     | <>               |
| $B$   | Believes         |
| $D$   | Dialogue tree    |
| $f_a$ | Jungian function |

** Imposing order
+ MBTI, PPSDQ and SL-TDI
+ Even Jung (principal, auxiliary)
So:

\[ \overset{next}{f_a} \to f_a \]

| /                   | <>                    |
| $f_a$               | Jungian function      |
| $\overset{next}{f_a}$ | Next jungian function |

*** Expanded

 \[ \left (\overset{next}{B \to D \to (B, D)}\right ) \to B \to D \overset{f_a}{\to} (B, D) \]

| /      | <>                    |
| $B$    | Believes              |
| $D$    | Dialogue tree         |
| $f_a$  | Jungian function      |
| $next$ | Next jungian function |

*** Alternatively

\[ \text{Personality}= [f_a] \]

+ Did both
+ System vs function controll

** Define process per function

*** Rational vs Irrational
+ Action generation
+ Sort by preference
+ Modify the Dialogue tree

*** Irrational
Action generation
+ $N_i$ Depth first
+ $N_e$ Depth + $x$ breath
+ $S_e$ Breath (all available)
+ $S_i$ Learned connection else random

*** Rational
Sort by preference
+ $T_e$ Priority on goals, else scene transitions
+ $T_i$ Priority on goals, else favour more options
+ $F_i$ Interal perlocutionary values
+ $F_e$ Learned perlocutionary values

**** Goals
\[ \phi = (a, s) \]

| /   | <>     |
| $a$ | Actor  |
| $s$ | Symbol |
| $\phi$ | Goal   |

- Can compare priority
- Can see if finished

**** Perlocutionary values
Modified connections:

\[ c = (s_1, s_2, P) \]

| /   | <>                       |
| $c$ | connection               |
| $s$ | Symbol                   |
| $P$ | Perlocutionary value set |
* Goals
+ +Compare personality theories+
+ +As a process+
+ Use Salve game
* Use Salve game
Remember every chat bot ever:
\[ \sigma \to \sigma \]

| /   | <>       |
| $\sigma$ | String   |

**  Even Alice with AIML
\[ \sigma \to \sigma \]
#+BEGIN_SRC nxml
<aiml>
<category>
    <pattern>
        How are you
    </pattern>
    <template>
        Not doing too well today.
    </template>
</category>
</aiml>
#+END_SRC

#+NAME: fig:pres:depaimlcats
#+BEGIN_SRC plantuml :cache yes :file img/uml/pres:depaimlcats.png :exports results
skinParam backgroundColor transparent
usecase "How are you" as how

storage "Not doing well today." as notwell

how -> notwell
#+END_SRC

#+LABEL: fig:pres:depaimlcats
#+ATTR_HTML: :style width:50%
#+RESULTS[4eecfb19d7735dd69705fc1ab1e8ef174d0b6bde]: fig:pres:depaimlcats
[[file:img/uml/pres:depaimlcats.png]]

** The in between step
\[ \sigma \to s \]
\[ s \to \sigma\]

| /   | <>     |
| $\sigma$ | String |
| $s$ | Symbol |

*** $\sigma \to s$

#+BEGIN_SRC nxml
<aiml>
<category>
    <pattern>
        How are you
    </pattern>
    <symbol>
      StatusInquiry
    </symbol>
</category>
</aiml>
#+END_SRC

#+NAME: fig:pres:aimlsyms
#+BEGIN_SRC plantuml :cache yes :file img/uml/pres:aimlsyms.png :exports results
skinParam backgroundColor transparent
usecase "How are you" as how

node StatusInquiry

how -> StatusInquiry
#+END_SRC

#+LABEL: fig:pres:aimlsyms
#+ATTR_HTML: :style width:50%
#+RESULTS[abf8c7cfccd18abae2fbb1e63b5eee57d78e9122]: fig:pres:aimlsyms
[[file:img/uml/pres:aimlsyms.png]]

*** $s \to \sigma$

#+BEGIN_SRC nxml
<aiml>
<category>
    <literal>
        How are you?
    </literal>
    <patterns>
        <pattern>How * you</pattern>
        <pattern>How are you *</pattern>
    </patterns>
    <symbol>
      StatusInquiry
    </symbol>
</category>
</aiml>
#+END_SRC

#+NAME: fig:pres:aimlliters
#+BEGIN_SRC plantuml :cache yes :file img/uml/pres:aimlliters.png :exports results
skinParam backgroundColor transparent
  usecase "How are you?" as howq
  usecase "How are you *" as how
  usecase "How * you" as howstar

node StatusInquiry[
  StatusInquiry
  ----
  How are you?
]

how --> StatusInquiry
howq --> StatusInquiry
howstar --> StatusInquiry
#+END_SRC

#+LABEL: fig:pres:aimlliters
#+ATTR_HTML: :style width:50%
#+RESULTS[9a3cf96aaf94827cf42c7415f6a275a2e4efb4c1]: fig:pres:aimlliters
[[file:img/uml/pres:aimlliters.png]]

*** Terser
#+BEGIN_SRC xml
<literal>
    How are you?
</literal>
<patterns>
    <pattern>How * you</pattern>
    <pattern>How are you *</pattern>
</patterns>
#+END_SRC

With:
+ Symbol name in filename
  + Free uniqueness gauranteed by FS
+ Drop aiml tags
+ Drop category tags

*** But Illegal XML
*** So we use YAML
#+BEGIN_SRC yaml
literals:
  - How are you
patterns:
  - How * you
  - How are you *
#+END_SRC
Still with symbol name as filename.

** Symbol graph
Remember, remember:

\[ c = (s_1, s_2) \]
\[ s_1, s_2 \in \mathcal{S} \wedge c \in G \]

| /             | <>                  |
| $c$           | connection          |
| $s$           | Symbol              |
| $\mathcal{S}$ | All encoded symbols |
| $G$           | Symbol graph        |



